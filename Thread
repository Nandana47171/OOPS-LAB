import java.util.Random;
import java.util.concurrent.atomic.AtomicInteger;
class MultiThreadedRandom {

    private static final AtomicInteger randomNumber = new AtomicInteger();
    private static final Random random = new Random();

    public static void main(String[] args) {
        Thread generatorThread = new Thread(new RandomNumberGenerator());
        Thread squareThread = new Thread(new SquareCalculator());
        Thread cubeThread = new Thread(new CubeCalculator());

        generatorThread.start();
        squareThread.start();
        cubeThread.start();
    }

    static class RandomNumberGenerator implements Runnable {
        @Override
        public void run() {
            while (true) {
                int num = random.nextInt(100);  
                randomNumber.set(num);
                System.out.println("Generated: " + num);
                try {
                    Thread.sleep(1000);  
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    break;
                }
            }
        }
    }

    static class SquareCalculator implements Runnable {
        @Override
        public void run() {
            while (true) {
                int num = randomNumber.get();
                if (num % 2 == 0) {
                    System.out.println("Square: " + (num * num));
                }
                try {
                    Thread.sleep(100);  
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    break;
                }
            }
        }
    }

    static class CubeCalculator implements Runnable {
        @Override
        public void run() {
            while (true) {
                int num = randomNumber.get();
                if (num % 2 != 0) {
                    System.out.println("Cube: " + (num * num * num));
                }
                try {
                    Thread.sleep(100);  
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    break;
                }
            }
        }
    }
}
