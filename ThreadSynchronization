// Nandana Ramachandran
// Roll no:44
class BankAccount {
    private int balance = 1000;  

    
    public synchronized void withdraw(int amount) {
        if (balance >= amount) {
            System.out.println(Thread.currentThread().getName() + " is withdrawing: " + amount);
            try {
                Thread.sleep(100);  
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
            balance -= amount;
            System.out.println(Thread.currentThread().getName() + " completed withdrawal. Remaining balance: " + balance);
        } else {
            System.out.println(Thread.currentThread().getName() + " attempted to withdraw: " + amount + ", but insufficient funds.");
        }
    }

    public int getBalance() {
        return balance;
    }
}

class WithdrawTask implements Runnable {
    private BankAccount account;
    private int amount;

    public WithdrawTask(BankAccount account, int amount) {
        this.account = account;
        this.amount = amount;
    }

    @Override
    public void run() {
        account.withdraw(amount);
    }
}
class ThreadSynchronizationDemo {
    public static void main(String[] args) {
        BankAccount account = new BankAccount();

        
        Thread t1 = new Thread(new WithdrawTask(account, 700), "Thread 1");
        Thread t2 = new Thread(new WithdrawTask(account, 500), "Thread 2");
        Thread t3 = new Thread(new WithdrawTask(account, 300), "Thread 3");
        Thread t4 = new Thread(new WithdrawTask(account, 200), "Thread 4");

         
        t1.start();
        t2.start();
        t3.start();
        t4.start();

         
        try {
            t1.join();
            t2.join();
            t3.join();
            t4.join();
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }

        
        System.out.println("Final balance: " + account.getBalance());
    }
}
